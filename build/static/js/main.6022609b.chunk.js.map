{"version":3,"sources":["components/Attribute.js","components/Image.js","App.js","reportWebVitals.js","index.js"],"names":["Attribute","props","Fragment","number","type","className","name","Image","require","config","App","form","useRef","useState","attributes","setAttributes","attributeChildren","i","push","images","setImages","imageChildren","ref","onSubmit","e","preventDefault","data","FormData","current","console","log","process","UPLOAD_URL","fetch","method","body","then","res","json","htmlFor","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAeeA,MAbf,SAAmBC,GACf,OACI,eAAC,IAAMC,SAAP,WACI,+CAAkBD,EAAME,UACxB,uBAAOC,KAAK,OAAOC,UAAU,eAAeC,KAAM,YAAcL,EAAME,OAAS,WAC/E,2CAAcF,EAAME,UACpB,uBAAOC,KAAK,OAAOC,UAAU,eAAeC,KAAM,YAAcL,EAAME,OAAS,YAC/E,gDAAmBF,EAAME,UACzB,uBAAOC,KAAK,OAAOC,UAAU,eAAeC,KAAM,YAAcL,EAAME,OAAS,qBCG5EI,MAXf,SAAeN,GACX,OACI,eAAC,IAAMC,SAAP,WACI,2CAAcD,EAAME,UACpB,uBAAOC,KAAK,OAAOC,UAAU,eAAeC,KAAM,QAAUL,EAAME,SAClE,gDAAmBF,EAAME,UACzB,uBAAOC,KAAK,OAAOC,UAAU,eAAeC,KAAM,QAAUL,EAAME,OAAS,qBCJvFK,EAAQ,GAAUC,SAuDHC,MArDf,WAcI,IAbA,IAAMC,EAAOC,iBAAO,MAWpB,EAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAoB,GACjBC,EAAI,EAAGA,EAAIH,EAAYG,GAAK,EACjCD,EAAkBE,KAAK,cAAC,EAAD,CAAmBf,OAAQc,GAAXA,IAK3C,IAFA,MAA4BJ,mBAAS,GAArC,mBAAOM,EAAP,KAAeC,EAAf,KACMC,EAAgB,GACbJ,EAAI,EAAGA,EAAIE,EAAQF,GAAK,EAC7BI,EAAcH,KAAK,cAAC,EAAD,CAAef,OAAQc,GAAXA,IAGnC,OACI,cAAC,IAAMf,SAAP,UACI,sBAAKG,UAAU,MAAf,UACI,6CACA,uBAAMiB,IAAKX,EAAMY,SA1BR,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAO,IAAIC,SAAShB,EAAKiB,SAC/BC,QAAQC,IAAIC,mIAAYC,YACxBC,MAAMF,mIAAYC,WAAY,CAC1BE,OAAQ,OACRC,KAAMT,IACPU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIT,QAAQC,IAAIQ,OAmB5C,UACI,uBAAOlC,KAAK,SAASE,KAAK,WAC1B,sBAAKD,UAAU,aAAf,UACI,uBAAOkC,QAAQ,OAAf,kBACA,uBAAOnC,KAAK,OAAOC,UAAU,eAAeC,KAAK,SACjD,uBAAOiC,QAAQ,eAAf,0BACA,uBAAOnC,KAAK,OAAOC,UAAU,eAAeC,KAAK,iBACjD,uBAAOiC,QAAQ,QAAf,mBACA,uBAAOnC,KAAK,OAAOC,UAAU,eAAeC,KAAK,aAErD,sBAAKD,UAAU,aAAf,UACI,wBAAQD,KAAK,SAASC,UAAU,eAAemC,QAAS,kBAAMzB,EAAcD,EAAa,IAAzF,eAECE,KAEL,sBAAKX,UAAU,aAAf,UACI,wBAAQD,KAAK,SAASC,UAAU,eAAemC,QAAS,kBAAMpB,EAAUD,EAAS,IAAjF,eACCE,cCvCVoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdlC,EAAQ,GAAUC,SAElBwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6022609b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Attribute(props) {\n    return (\n        <React.Fragment>\n            <label>Attribute {props.number}</label>\n            <input type=\"text\" className=\"form-control\" name={'attribute' + props.number + '[name]'}/>\n            <label>Value {props.number}</label>\n            <input type=\"text\" className=\"form-control\" name={'attribute' + props.number + '[value]'}/>\n            <label>Sort Order {props.number}</label>\n            <input type=\"text\" className=\"form-control\" name={'attribute' + props.number + '[sort_order]'}/>\n        </React.Fragment>\n    )\n}\n\nexport default Attribute","import React from \"react\";\n\nfunction Image(props) {\n    return (\n        <React.Fragment>\n            <label>Image {props.number}</label>\n            <input type=\"file\" className=\"form-control\" name={'image' + props.number}/>\n            <label>Sort Order {props.number}</label>\n            <input type=\"text\" className=\"form-control\" name={'image' + props.number + '[sort_order]'}/>\n        </React.Fragment>\n    )\n}\n\nexport default Image","import React, {useState, useRef} from \"react\";\nimport './App.css';\nimport Attribute from \"./components/Attribute\";\nimport Image from \"./components/Image\";\nrequire('dotenv').config()\n\nfunction App() {\n    const form = useRef(null)\n    const handleSubmit = e => {\n        e.preventDefault()\n        const data = new FormData(form.current)\n        console.log(process.env.UPLOAD_URL)\n        fetch(process.env.UPLOAD_URL, {\n            method: 'POST',\n            body: data,\n        }).then(res => res.json()).then(json => console.log(json))\n    }\n\n    const [attributes, setAttributes] = useState(0);\n    const attributeChildren = [];\n    for (let i = 0; i < attributes; i += 1) {\n        attributeChildren.push(<Attribute key={i} number={i}/>);\n    }\n\n    const [images, setImages] = useState(0);\n    const imageChildren = [];\n    for (let i = 0; i < images; i += 1) {\n        imageChildren.push(<Image key={i} number={i}/>);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"App\">\n                <h1>Upload Form</h1>\n                <form ref={form} onSubmit={handleSubmit}>\n                    <input type=\"submit\" name=\"Upload\"/>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input type=\"text\" className=\"form-control\" name=\"name\"/>\n                        <label htmlFor=\"beschreibung\">Beschreibung</label>\n                        <input type=\"text\" className=\"form-control\" name=\"beschreibung\"/>\n                        <label htmlFor=\"preis\">Preis</label>\n                        <input type=\"text\" className=\"form-control\" name=\"preis\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"button\" className=\"btn btn-dark\" onClick={() => setAttributes(attributes + 1)}>+\n                        </button>\n                        {attributeChildren}\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"button\" className=\"btn btn-dark\" onClick={() => setImages(images + 1)}>+</button>\n                        {imageChildren}\n                    </div>\n                </form>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nrequire('dotenv').config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}